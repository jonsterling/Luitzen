module Rational where

import Integer
import Nat

PreRational : Type
PreRational = {n : Integer | {d: Integer | [d = zer] -> Zero }}

RatEquiv : PreRational -> PreRational -> Type
RatEquiv = \p q. pcase p of
  (n, dp) -> pcase q of
  (n', dp') -> pcase dp of
  (d, dnz) -> pcase dp' of
  (d', dnz') -> (iminus (itimes n d') (itimes n' d)) = pos 0

Rational : Type
Rational = PreRational / RatEquiv

oneHalf : Rational
oneHalf = <(pos 1, (pos 2, \[p]. contra p))>

twoFourths : Rational
twoFourths = <(pos 2, (pos 4, \[p]. contra p))>

oneHalfEqualsTwoFourths : oneHalf = twoFourths
oneHalfEqualsTwoFourths = refl refl

