module Bool where

data Bool : Type where
  true
  false

-- ## A demonstration of observational equality for functions
id : Bool -> Bool
id = \x . x

not : Bool -> Bool
ind not x = case x of
  true -> false
  false -> true

notnot : Bool -> Bool
notnot = \x. not (not x)

idnotnot : id = notnot
idnotnot =
  refl \x y xy.
    case x of
      true -> case y of
        true -> refl
        false -> contra xy
      false -> case y of
        true -> contra xy
        false -> refl

-- ## A demonstration of quotient types
-- This isn't as interesting as the proper Interval type, since UIP holds in
-- OTT (and thence it is provable that seg = refl).
Interval : Type
Interval = Bool / (\x y. One)

one : Interval
one = <true>

two : Interval
two = <false>

seg : one = two
seg = refl

-- It is possible to construct functions out of the interval, so long as they are
-- continuous. In the case of quotients, this means that they must respect the
-- quotient's equivalence relation.
exposeInterval : Interval -> Bool
exposeInterval = \i. expose i under \x. Bool with \x. true by \x y rpf. refl

-- A demonstration that quotient elimination computes.
testExposure : exposeInterval <true> = true
testExposure = refl


