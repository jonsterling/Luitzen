-- PI library for natural numbers
--
-- Some of these are adapted from Trellys examples
--
-- Author: Stephanie Weirich, July 2013
--

module Nat where
import Equality
import Bool

data ℕ : Type where
  zero
  succ of (x : ℕ)

lt : (m : ℕ) (n : ℕ) Bool
ind lt m = \n. case m of
  zero -> case n of
    zero -> false
    succ n' -> true
  succ m' -> case n of
    zero -> false
    succ n' -> lt m' n'

is_zero : ℕ -> Bool
is_zero = \ x . case x of
  zero -> true
  succ n' -> false

pred : ℕ -> ℕ
pred = \n . case n of
  zero -> zero
  succ n' -> n'

sm_eq_Sn__m_eq_n : (m:ℕ) (n:ℕ) (succ m = succ n) -> m = n
sm_eq_Sn__m_eq_n = \m n sm_eq_Sn .
  let pSm_eq_m    = (refl : pred (succ m) = m) in
  let pSn_eq_n    = (refl : pred (succ n) = n) in
  let pSm_eq_pSn  = subst refl by sm_eq_Sn at h.pred (succ m) = pred h in
  let m_eq_pSn    = subst pSm_eq_pSn by pSm_eq_m at h. h = pred (succ n) in
  subst m_eq_pSn by pSn_eq_n at h. m = h


m_eq_n_Sm_eq_Sn : (m:ℕ) (n:ℕ) m = n -> (succ m = succ n)
m_eq_n_Sm_eq_Sn = \m n pf .
  subst refl by pf at x. (succ m = succ x)

nat_eq : ℕ -> ℕ -> Bool
ind nat_eq x = \ y .
  case x of
     zero -> case y of
        zero -> true
        succ n -> false
     succ m -> case y of
        zero -> false
        succ n -> nat_eq m n

plus : ℕ -> ℕ -> ℕ
ind plus n = \m .
  case n of
    zero -> m
    succ pred -> succ (plus pred m)

times : ℕ -> ℕ -> ℕ
ind times n = \m .
  case n of
    zero -> zero
    succ n' -> plus m (times n' m)

plus0 : ℕ -> ℕ
plus0 = \x . plus x 0

plus0' : ℕ -> ℕ
plus0' = plus 0

hPlus0plus0' : (x : ℕ) (y : ℕ) (xy : x = y) -> plus0 x = plus0' y
hPlus0plus0' =
  \x y xy.
    case x of
      zero -> induction [y]
      succ n -> case y of
        zero -> _
        succ m -> resp ℕ ℕ (plus0 n) (plus0' m) (\y. succ y) (hPlus0plus0' n m (resp ℕ ℕ x y pred xy))

plus0plus0' : plus0 = plus0'
plus0plus0' = _

testSubst : ℕ
testSubst = subst 0 by plus0plus0' at h. ℕ

testCanonical : testSubst = 0
testCanonical = refl

mult : ℕ -> ℕ -> ℕ
ind mult n = \m .
  case n of
    zero -> zero
    succ pred -> plus m (mult pred m)


minus : ℕ -> ℕ -> ℕ
ind minus n = \m .
   case n of
     zero -> zero
     succ pred ->
       case m of
         zero -> n
         succ mpred -> minus pred mpred

-------------------------------------------------------
-- Reasoning about datatypes

minus_same_zero : (n : ℕ) -> (minus n n = 0)
ind minus_same_zero n =
    case n of
      zero -> refl
      succ p ->
        let ih = minus_same_zero p in
        let x  = (refl : minus p p = (minus (succ p) (succ p))) in
        (subst ih by x at h. (h = 0))

lemma_minus_zero_id : (n : ℕ) -> (minus n 0 = n)
lemma_minus_zero_id = \n . induction [n]

lemma_minus_plus_id : (m : ℕ) -> (n : ℕ) -> ((minus (plus m n) m) = n)
ind lemma_minus_plus_id m = \n .
  case m of
     zero -> lemma_minus_zero_id n
     succ m' -> lemma_minus_plus_id m' n

plus_associates : (i:ℕ) -> (j:ℕ) -> (k:ℕ) -> plus (plus i j) k = plus i (plus j k)
plus_associates = ind pa i = \j k .
  case i of
     -- `refl` away `zero`s on the left of `(+)`: (0+j)+k = j+k = 0+(j+k)
    zero -> refl
    -- associate `plus` in `succ` of the inductive case:
    -- S ((i'+j)+k) = S (i'+(j+k))
    succ i' ->
      let ih = (pa i' j k : plus (plus i' j) k = plus i' (plus j k))
      in subst refl by ih at x. succ (plus (plus i' j) k) = succ x

