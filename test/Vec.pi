-----------------------------------------------------------------------
-- PI library for finite-length vectors
--
-- Some of these are adapted from Vec.agda
--
-- Author: Stephanie Weirich, July 2013
-----------------------------------------------------------------------

module Vec where

import Equality
import Nat
import Fin
import Product

data Vec (A : Type) (n : Nat) : Type where
  Nil  of [n = Zero]
  Cons of [m:Nat][n = Succ m] (A) (Vec A m)

data In (A:Type) (x:A) (n:Nat) (v:Vec A n) : Type where
  Here  of [m:Nat][pf:n = Succ m][xs : Vec A m]
           [v = Cons [m][pf] x xs]
  There of [m:Nat][pf:n = Succ m][xs : Vec A m]
           [y:A][v = Cons [m][pf] y xs]
           (In A x m xs)

singleton : [A:Type] -> A -> Vec A 1
singleton = \[A] x. Cons [0][refl tt] x (Nil [refl tt])


head : [A :Type] [n:Nat] -> Vec A (Succ n) -> A
head = \ [A][n] x.  case x of
     Cons [m][m_eq] y ys -> y
     Nil  [n_eq] -> contra n_eq


tail : [A :Type] [n:Nat] -> Vec A (Succ n) -> Vec A n
tail = \ [A][n] x.  case x of
     Nil  [n_eq] -> contra n_eq
    -- m : Nat, m_eq: (Succ n) = (Succ m), y : A, ys : Vec A m
     Cons [m][m_eq] y ys ->
      subst ys by sm_eq_Sn__m_eq_n m n (sym [Nat][Succ n][Succ m] m_eq)
              at h.Vec A h

append : [A :Type] [m:Nat] [n:Nat] -> Vec A m -> Vec A n -> Vec A (plus m n)
append = \[A] . ind concat [m] = \ [n] v1 ys . case v1 of
     Cons [m0][n_eq] x xs -> Cons [plus m0 n][refl tt] x (concat [m0][n] xs ys)
     Nil [n_eq] -> ys

zap : [A:Type] [B: Type] [n:Nat] -> Vec (A -> B) n -> Vec A n -> Vec B n
zap = \[A][B]. ind zap [n] = \ vs1 vs2 .
  case vs1 of
    Nil [eq1] -> case vs2 of
       Nil  [eq2]  -> Nil [refl tt]
       Cons [m2][eq2] f fs -> contra eq2
    Cons [m1][eq1] f fs -> case vs2 of
       Nil  [eq2]  -> contra eq2
       Cons [m2][eq2] x xs ->
        let [m1_eq_m2] = sm_eq_Sn__m_eq_n m1 m2 eq2   in
        let [m2_eq_m1] = sym [Nat][m1][m2] m1_eq_m2   in
        let xs' = subst xs by m2_eq_m1 at h. Vec A h  in
        Cons [m1][refl tt] (f x) (zap [m1] fs xs')

replicate : [A:Type] (n:Nat) -> A -> Vec A n
replicate = \[A] . ind replicate n = \ x.
   case n of
     Zero   -> Nil [refl tt]
     Succ m -> Cons [m][refl tt] x (replicate m x)

map : [A:Type] [B:Type] [n:Nat] -> (A -> B) -> Vec A n -> Vec B n
map = \[A][B]. ind map [n] = \f v.
  case v of
    Nil [eq] -> Nil [eq]
    Cons [m][eq] x xs -> Cons [m][eq] (f x) (map [m] f xs)

-- note: this version of map needs n at runtime

mapn : [A:Type] [B:Type] (n:Nat) -> (A -> B) -> Vec A n -> Vec B n
mapn = \[A][B] n f v. zap[A][B][n] (replicate [A->B] n f) v

zipWith : [A:Type] [B:Type] [C:Type] -> (n:Nat) -> (A -> B -> C)
      -> Vec A n -> Vec B n -> Vec C n
zipWith = \[A][B][C] n f v1 v2.
  zap[B][C][n] (zap [A][B -> C][n] (replicate [A -> B -> C] n f) v1) v2

zip : [A:Type] [B:Type] (n:Nat) -> Vec A n -> Vec B n -> Vec (Times A B) n
zip = \[A][B] n . zipWith [A][B][Times A B] n (prod[A][B])

foldr : [A:Type] [B:Nat -> Type] [m:Nat] (f : [n:Nat] -> A -> B n -> B (Succ n)) -> B Zero -> Vec A m -> B m
foldr = \[A][B] . ind foldr [m] = \f n v .
  case v of
    Nil [eq] -> n
    Cons [m'][eq] x xs -> f [m'] x (foldr [m'] f n xs)

-- we can also make m relevant, with a bit of effort
foldr' : [A:Type]-> [B:Nat -> Type] -> (m:Nat) ->
        (f : (n:Nat) -> A -> B n -> B (Succ n)) ->
        B Zero ->
        Vec A m -> B m
foldr' = \[A][B] . ind foldr m = \f n v .
  case v of
    Nil [eq] -> n
    Cons [m'][eq] x xs -> f (pred m) x (foldr (pred m) f n xs)


-- we can also define foldr' by induction on m
foldr'' : [A:Type]-> [B:Nat -> Type] -> (m:Nat) ->
        (f : (n:Nat) -> A -> B n -> B (Succ n)) ->
        B Zero ->
        Vec A m -> B m
foldr'' = \[A][B] . ind foldr' m = \f n v .
  case m of
    Zero ->
      case v of
        Nil [eq] -> n
        Cons [m'][eq] x xs -> contra eq
    Succ m1 ->
      case v of
        Nil [eq] -> contra eq
        Cons [m2][eq2] x xs ->
          let [m1_eq_m2] = sm_eq_Sn__m_eq_n m1 m2 eq2   in
          let [m2_eq_m1] = sym [Nat][m1][m2] m1_eq_m2   in
          let xs' = subst xs by m2_eq_m1 at h. Vec A h  in
          f m1 x (foldr' m1 f n xs')


foldr1 : [A:Type] [m:Nat] -> (A -> A -> A) -> Vec A (Succ m) -> A
foldr1 = \[A]. ind foldr1 [m] = \ f v . case v of
  Nil  [eq] -> contra eq
  Cons [m'][eq1] x ys ->
      case ys of
         (Nil  [eq2]) -> x
         (Cons [m''][eq2] y xs) ->
            -- eq1 : Succ m = Succ m'
            -- eq2 : m' = Succ m''
            let [m'_eq_m] = sym [Nat] [m][m'] (sm_eq_Sn__m_eq_n m m' eq1)   in
            let [m_eq_Sm''] = subst eq2 by m'_eq_m at x. x = Succ m'' in
            -- foldr1 : (x:Nat | x < m ) -> (A -> A -> A) -> Vec A (Succ x) -> A
            let rec = subst foldr1 by m_eq_Sm'' at
               h. [x:Nat | x < h ] -> (A -> A -> A) -> Vec A (Succ x) -> A in
            f x (rec [m''] f (Cons [m''][eq2] y xs))


concat : [A:Type] [m : Nat] [n : Nat] -> Vec (Vec A m) n -> Vec A (mult n m)
concat = \[A][m]. ind concat [n] = \v. case v of
   Nil [eq] -> Nil [refl tt]
   Cons [n'][eq] xs xss -> append[A][m][mult n' m] xs (concat [n'] xss)


foldl : [A: Type] [m : Nat] [B : Nat -> Type] -> ([n:Nat] -> B n -> A -> B (Succ n)) -> B Zero -> Vec A m -> B m
foldl = \[A]. ind foldl [m] = \ [B] f z v .
  case v of
    Nil  [eq] -> z
    Cons [m'][eq] x xs ->
      let n' = f [0] z x in
       foldl [m'][\ n'. B (Succ n')] (\[n] b a . f [Succ n] b a) n' xs

--foldl1 : [A:Type] -> (m:Nat) ->



{-

foldl₁ : ∀ {a} {A : Set a} {m} →
         (A → A → A) → Vec A (suc m) → A
foldl₁ _⊕_ (x ∷ xs) = foldl _ _⊕_ x xs

splitAt : ∀ {a} {A : Set a} m {n} (xs : Vec A (m + n)) →
          ∃₂ λ (ys : Vec A m) (zs : Vec A n) → xs ≡ ys ++ zs
splitAt zero    xs                = ([] , xs , refl)
splitAt (suc m) (x ∷ xs)          with splitAt m xs
splitAt (suc m) (x ∷ .(ys ++ zs)) | (ys , zs , refl) =
  ((x ∷ ys) , zs , refl)

take : ∀ {a} {A : Set a} m {n} → Vec A (m + n) → Vec A m
take m xs          with splitAt m xs
take m .(ys ++ zs) | (ys , zs , refl) = ys

drop : ∀ {a} {A : Set a} m {n} → Vec A (m + n) → Vec A n
drop m xs          with splitAt m xs
drop m .(ys ++ zs) | (ys , zs , refl) = zs

group : ∀ {a} {A : Set a} n k (xs : Vec A (n * k)) →
        ∃ λ (xss : Vec (Vec A k) n) → xs ≡ concat xss
group zero    k []                  = ([] , refl)
group (suc n) k xs                  with splitAt k xs
group (suc n) k .(ys ++ zs)         | (ys , zs , refl) with group n k zs
group (suc n) k .(ys ++ concat zss) | (ys , ._ , refl) | (zss , refl) =
  ((ys ∷ zss) , refl)



-}
